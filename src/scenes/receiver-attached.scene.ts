import { GIFT_DELIVERED_SCENE, RECEIVER_ATTACHED_SCENE } from 'app.constants';
import {
  receiverAttachedKeyboard,
  reminderKeyboard,
  sendLetterKeyboard,
} from 'keyboards/receiver-attached';
import { getTranslation, lang } from 'language';
import { Ctx, On, Scene, SceneEnter } from 'nestjs-telegraf';

@Scene(RECEIVER_ATTACHED_SCENE)
export class ReceiverAttached {
  currentScene: string;
  constructor() {
    this.currentScene = RECEIVER_ATTACHED_SCENE;
  }
  @SceneEnter()
  async onSceneEnter(@Ctx() ctx) {
    const { language_code } = ctx.from;
    const l = lang[language_code].RECEIVER_ATTACHED;
    const { INSTRUCTIONS } = getTranslation(
      language_code,
      this.currentScene,
      'INSTRUCTIONS',
    );
    for await (const INSTRUCTION of INSTRUCTIONS) {
      await ctx.reply(INSTRUCTION);
    }
    await ctx.reply(8080);
    await ctx.reply(
      getTranslation(language_code, this.currentScene, 'FINAL_INSTRUCTIONS'),
      receiverAttachedKeyboard(
        getTranslation(
          language_code,
          this.currentScene,
          'FINAL_INSTRUCTIONS_KEYBOARD',
        ),
      ),
    );
  }

  @On('callback_query')
  async onInlineKeyboard(@Ctx() ctx) {
    const { id, language_code } = ctx.from;
    const { queryType } = JSON.parse(ctx.update.callback_query.data);

    //–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ start
    if (queryType === 'WENT_FOR_GIFT') {
      await ctx.reply(
        '–ö—Å—Ç–∞—Ç–∏! –°–æ–≤—Å–µ–º –∑–∞–±—ã–ª —Å–∫–∞–∑–∞—Ç—å. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–∏—à—å –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞ 9, —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –ø–æ–¥–∞—Ä–∫–∞. –¢–∞–∫ —á—Ç–æ –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –¥—É–º–∞—Ç—å, –∫–∞–∫–∏–µ –∫—Ä–∞—Å–∏–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–ø–∏—à–µ—à—å.',
        reminderKeyboard,
      );
    }
    if (queryType === 'WILL_SEND_LETTER') {
      await ctx.reply('–û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º');
    }
    if (queryType === 'WONT_SEND_GIFT') {
      await ctx.reply('–ü–æ–Ω—è–ª –ø—Ä–∏–Ω—è–ª –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª');
    }
    if (queryType === 'OKAY') {
      await ctx.reply('üòá');
    }

    if (queryType === GIFT_DELIVERED_SCENE) {
      await ctx.scene.enter(GIFT_DELIVERED_SCENE);
    }
  }

  @On('message')
  async onLetter(@Ctx() ctx) {
    const { id, language_code } = ctx.from;
    //–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –±—ã–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    await ctx.reply('–°–æ—Ö—Ä–∞–Ω–∏–ª');
  }

  async remindAboutLetter(@Ctx() ctx) {
    const { id, language_code } = ctx.from;
    await ctx.reply(
      '–ö–∞–∫ —è –∏ –≥–æ–≤–æ—Ä–∏–ª —Ä–∞–Ω–µ–µ, —Ç—ã –º–æ–∂–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ digital-–ø–æ—Å–ª–∞–Ω–∏–µ–º! –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç —Ç–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–±–µ—Ä–µ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –µ–º—É –ø–æ–¥–∞—Ä–æ–∫.',
      sendLetterKeyboard,
    );
  }
}
